# Generated by Django 4.0.3 on 2022-04-12 09:22

from django.db import migrations

from ..models import Employee as EmployeeModel


def create_groups(apps, schema_migration):
    Employee = apps.get_model("employees", "Employee")
    Client = apps.get_model("clients", "Client")
    Company = apps.get_model("clients", "Company")
    Contract = apps.get_model("events", "Contract")
    Event = apps.get_model("events", "Event")
    Group = apps.get_model("auth", "Group")
    Permission = apps.get_model("auth", "Permission")
    ContentType = apps.get_model("contenttypes", "ContentType")

    add_employee, _ = Permission.objects.get_or_create(
        codename="add_employee",
        content_type=ContentType.objects.get_for_model(Employee),
    )
    change_employee, _ = Permission.objects.get_or_create(
        codename="change_employee",
        content_type=ContentType.objects.get_for_model(Employee),
    )
    delete_employee, _ = Permission.objects.get_or_create(
        codename="delete_employee",
        content_type=ContentType.objects.get_for_model(Employee),
    )
    view_employee, _ = Permission.objects.get_or_create(
        codename="view_employee",
        content_type=ContentType.objects.get_for_model(Employee),
    )

    add_client, _ = Permission.objects.get_or_create(
        codename="add_client",
        content_type=ContentType.objects.get_for_model(Client),
    )
    change_client, _ = Permission.objects.get_or_create(
        codename="change_client",
        content_type=ContentType.objects.get_for_model(Client),
    )
    delete_client, _ = Permission.objects.get_or_create(
        codename="delete_client",
        content_type=ContentType.objects.get_for_model(Client),
    )
    view_client, _ = Permission.objects.get_or_create(
        codename="view_client",
        content_type=ContentType.objects.get_for_model(Client),
    )

    add_company, _ = Permission.objects.get_or_create(
        codename="add_company",
        content_type=ContentType.objects.get_for_model(Company),
    )
    change_company, _ = Permission.objects.get_or_create(
        codename="change_company",
        content_type=ContentType.objects.get_for_model(Company),
    )
    delete_company, _ = Permission.objects.get_or_create(
        codename="delete_company",
        content_type=ContentType.objects.get_for_model(Company),
    )
    view_company, _ = Permission.objects.get_or_create(
        codename="view_company",
        content_type=ContentType.objects.get_for_model(Company),
    )

    add_contract, _ = Permission.objects.get_or_create(
        codename="add_contract",
        content_type=ContentType.objects.get_for_model(Contract),
    )
    change_contract, _ = Permission.objects.get_or_create(
        codename="change_contract",
        content_type=ContentType.objects.get_for_model(Contract),
    )
    delete_contract, _ = Permission.objects.get_or_create(
        codename="delete_contract",
        content_type=ContentType.objects.get_for_model(Contract),
    )
    view_contract, _ = Permission.objects.get_or_create(
        codename="view_contract",
        content_type=ContentType.objects.get_for_model(Contract),
    )

    add_event, _ = Permission.objects.get_or_create(
        codename="add_event",
        content_type=ContentType.objects.get_for_model(Event),
    )
    change_event, _ = Permission.objects.get_or_create(
        codename="change_event",
        content_type=ContentType.objects.get_for_model(Event),
    )
    delete_event, _ = Permission.objects.get_or_create(
        codename="delete_event",
        content_type=ContentType.objects.get_for_model(Event),
    )
    view_event, _ = Permission.objects.get_or_create(
        codename="view_event",
        content_type=ContentType.objects.get_for_model(Event),
    )

    # Sales.
    salesperson_permissions = [
        view_employee,
        view_client,
        add_client,
        view_company,
        add_company,
        view_event,
        add_event,
        view_contract,
        add_contract,
    ]

    sales_team = Group(name="sales")
    sales_team.save()

    sales_team.permissions.set(salesperson_permissions)

    # Support.
    support_consultant_permissions = [
        view_employee,
        view_client,
        view_company,
        view_contract,
        view_event,
    ]

    support_team = Group(name="support")
    support_team.save()

    support_team.permissions.set(support_consultant_permissions)

    # Management.
    manager_permissions = [
        view_employee,
        add_employee,
        change_employee,
        delete_employee,
        view_client,
        add_client,
        change_client,
        delete_client,
        view_company,
        add_company,
        change_company,
        delete_company,
        view_contract,
        add_contract,
        change_contract,
        delete_contract,
        view_event,
        add_event,
        change_event,
        delete_event,
    ]

    management_team = Group(name="management")
    management_team.save()

    management_team.permissions.set(manager_permissions)

    for employee in Employee.objects.all():
        if employee.role == EmployeeModel.SALES_PERSON:
            sales_team.user_set.add(employee)
        elif employee.role == EmployeeModel.SUPPORT_CONSULTANT:
            support_team.user_set.add(employee)
        elif employee.role == EmployeeModel.MANAGER:
            management_team.user_set.add(employee)


class Migration(migrations.Migration):

    dependencies = [
        # ('contenttypes', '__latest__'), # required or emit_post_migrate_signal will bail out
        # ('auth', '__latest__'), # possibly required if using guardian / allauth
        ("employees", "0002_alter_employee_is_staff"),
        ("events", "0001_initial"),
        # ("sessions", "0001_initial"),
    ]

    operations = [migrations.RunPython(create_groups)]
